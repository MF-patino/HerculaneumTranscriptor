openapi: 3.0.3
info:
  title: User management API
  description: |-
    This API specifies the operations that can be performed on user profiles.
  version: 1.0.11
servers:
  - url: https://localhost:8080/
tags:
  - name: user
    description: Operations on user profiles

paths:
  /user:
    post:
      tags:
        - user
      summary: Log in as a user
      description: Any client may attempt logging in as an existing user.
      operationId: loginUser
      requestBody:
        description: Information for logging in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInfo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        default:
          description: Unexpected error
          $ref: '#/components/responses/Error'

  /register:
    post:
      tags:
        - user
      summary: Create user
      description: Any client may register a new user.
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInfo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        default:
          description: Unexpected error
          $ref: '#/components/responses/Error'

  /permissions/{username}:

    put:
      tags:
        - user
      summary: Update user permissions
      description: This can only be done by `root` or `admin` users.
      operationId: updateUserPermissions

      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          description: Username to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user's access level
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePermissions'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid username supplied
          $ref: '#/components/responses/Error'
        '404':
          description: User not found
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: Returns public access information for a given user.
      operationId: getUserByName

      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid username supplied
          $ref: '#/components/responses/Error'
        '404':
          description: User not found
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - user
      summary: Update user information
      description: This can only be done by the same user, an admin or root user.
      operationId: updateUser

      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          description: Username to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing user's information, including password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserInfo'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid username supplied
          $ref: '#/components/responses/Error'
        '404':
          description: User not found
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser

      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          $ref: '#/components/responses/Error'
        '404':
          description: User not found
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: string
    Error:
      description: Default error message bearer
      content:
        application/json:
          schema:
            type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  x-validation-vars:
    passwordMinLength: &passwordMinLength 3
    entryMinLength: &entryMinLength 1
    entryMaxLength: &entryMaxLength 50

  schemas:
    BasicUserInfo:
      required:
        - username
        - firstName
        - lastName
        - contact

      type: object
      properties:
        username:
          type: string
          example: JohnDoe
          minLength: *entryMinLength
          maxLength: *entryMaxLength
        firstName:
          type: string
          example: John
          minLength: *entryMinLength
          maxLength: *entryMaxLength
        lastName:
          type: string
          example: Doe
          minLength: *entryMinLength
          maxLength: *entryMaxLength
        contact:
          type: string
          format: email
          example: johndoe@email.com
          minLength: *entryMinLength
          maxLength: *entryMaxLength

    UserInfo:
      required:
        - basic_info
        - permissions

      type: object
      properties:
        basic_info:
          $ref: "#/components/schemas/BasicUserInfo"
        permissions:
          type: string
          description: >
            These are the possible permission access levels for a user:
              * `root` - Only one root user can exist, but they can perform any operation except changing their permission level.
              * `admin` - Except changing `root` user permissions, they can perform any operation.
              * `write` - Can read and write new annotations.
              * `read` - Can only read annotations from other users.
          enum:
            - root
            - admin
            - write
            - read
          example: read

    ChangePermissions:
      required:
        - permissions

      type: object
      properties:
        permissions:
          type: string
          description: Note that a user cannot be promoted to `root`.
          enum:
            - admin
            - write
            - read
          example: read

    Password:
      type: string
      example: '12345'
      minLength: *passwordMinLength
      maxLength: *entryMaxLength

    UserLoginInfo:
      required:
        - user_name
        - password

      type: object
      properties:
        user_name:
          type: string
          example: 'JohnDoe'
          minLength: *entryMinLength
          maxLength: *entryMaxLength
        password:
          $ref: "#/components/schemas/Password"

    UserRegisterInfo:
      required:
        - basic_info
        - password

      type: object
      properties:
        basic_info:
          $ref: "#/components/schemas/BasicUserInfo"
        password:
          $ref: "#/components/schemas/Password"

    # Identical to UserRegisterInfo but more flexible, as any field can be omitted
    ChangeUserInfo:
      type: object
      properties:
        basic_info:
          $ref: "#/components/schemas/BasicUserInfo"
        password:
          $ref: "#/components/schemas/Password"